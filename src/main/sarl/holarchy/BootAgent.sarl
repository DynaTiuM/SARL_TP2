/** 
 * 
 */
package holarchy

import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import ui.SearchManagerGUI
import java.util.concurrent.ConcurrentLinkedQueue
import java.io.File

abstract class SearchManagerCallback {
  abstract def onSearch(path: String, criteria: String)
}

abstract class SearchResultCallback {
	abstract def onSearchCompleted(foundFiles: ConcurrentLinkedQueue<File>)
}

agent BootAgent {
	uses Logging, Lifecycle
	
	var ui: SearchManagerGUI

	val searchManagerCallback = new SearchManagerCallback {
		def onSearch(path : String, criteria : String) {
			println("Received from UI: Path: " + path + ", Criteria: " + criteria)
			
			val resultListener = new SearchResultCallback {
				def onSearchCompleted(foundFiles: ConcurrentLinkedQueue<File>) {
					println("Search completed. Found files: " + foundFiles)
					ui.updateResults(foundFiles)
				}
			}
			spawn(SearchManager, path, criteria, resultListener)
		}
	}

	on Initialize {
		ui = new SearchManagerGUI(searchManagerCallback)
		loggingName = "Boot"
		
	}
}
