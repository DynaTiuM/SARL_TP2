/** 
 * 
 */
package holarchy

import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Logging
import java.io.File
import java.util.UUID
import io.sarl.api.core.ParticipantJoined
import java.util.concurrent.ConcurrentLinkedQueue

/** 
 * 
 */
agent SearchManager {
	uses Lifecycle, Logging, DefaultContextInteractions

	var rootPath : File
	var criteria : String
	
	var aid : UUID
	var paths : ConcurrentLinkedQueue<File>
	var resultListener : SearchResultCallback
	
	on Initialize {
		this.rootPath = new File(occurrence.parameters.get(0) as String)
		this.criteria = occurrence.parameters.get(1) as String
		this.resultListener = occurrence.parameters.get(2) as SearchResultCallback
		
		synchronized (this) {
			aid = UUID::randomUUID
			paths = new ConcurrentLinkedQueue
			spawnInContextWithID(SearchAgent, aid, defaultContext, true)
		}
		
		//loggingName = "Search Manager"
	}
	
	on ParticipantJoined [occurrence.source.ID == aid] {
		emit(new SearchRequest(rootPath, criteria))[it.ID == aid]
	}
	
	on FileFound {
		info("File received:" + occurrence.path)
		paths.add(occurrence.path)
	}

	on SearchFinished [occurrence.source.ID == aid] {
		info("Holarchy destroyed.")
		info("Files found :" + paths)
		resultListener.onSearchCompleted(paths)
		killMe
	}
	
	
}
